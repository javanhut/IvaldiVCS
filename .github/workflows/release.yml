name: Release - Build and Package

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > changelog.txt
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s (%h)" >> changelog.txt || echo "- Initial release" >> changelog.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: changelog.txt
          draft: false
          prerelease: false

  build-and-upload:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
            artifact_name: ivaldi
            asset_name: ivaldi-linux-amd64

          - goos: linux
            goarch: arm64
            os: ubuntu-latest
            artifact_name: ivaldi
            asset_name: ivaldi-linux-arm64

          # macOS builds
          - goos: darwin
            goarch: amd64
            os: macos-latest
            artifact_name: ivaldi
            asset_name: ivaldi-darwin-amd64

          - goos: darwin
            goarch: arm64
            os: macos-latest
            artifact_name: ivaldi
            asset_name: ivaldi-darwin-arm64

          # Windows builds
          - goos: windows
            goarch: amd64
            os: ubuntu-latest
            artifact_name: ivaldi.exe
            asset_name: ivaldi-windows-amd64

          - goos: windows
            goarch: arm64
            os: ubuntu-latest
            artifact_name: ivaldi.exe
            asset_name: ivaldi-windows-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags "-s -w -X main.Version=${{ needs.create-release.outputs.version }}" -o build/${{ matrix.artifact_name }} ./main.go

      - name: Create README for archive
        run: |
          cat > build/README.txt << 'EOF'
          Ivaldi VCS - Modern Version Control System
          ===========================================

          Version: ${{ needs.create-release.outputs.version }}
          Platform: ${{ matrix.goos }}-${{ matrix.goarch }}

          Installation Instructions:
          --------------------------

          Linux/macOS:
          1. Extract the archive: tar -xzf ivaldi-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          2. Move binary to PATH: sudo mv ivaldi /usr/local/bin/
          3. Make executable: sudo chmod +x /usr/local/bin/ivaldi
          4. Verify installation: ivaldi --version

          Windows:
          1. Extract the archive
          2. Add the directory containing ivaldi.exe to your PATH
          3. Verify installation: ivaldi --version

          Quick Start:
          -----------
          ivaldi forge              # Initialize repository
          ivaldi status             # Check status
          ivaldi gather <files>     # Stage files
          ivaldi seal "message"     # Create commit

          Documentation:
          -------------
          Visit: https://github.com/javanhut/IvaldiVCS

          For more information and full documentation, see:
          https://javanhut.github.io/IvaldiVCS
          EOF

      - name: Copy LICENSE to build directory
        run: |
          if [ -f LICENSE ]; then
            cp LICENSE build/
          else
            echo "MIT License" > build/LICENSE
          fi

      - name: Create tarball (Unix)
        if: matrix.goos != 'windows'
        working-directory: build
        run: |
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }} README.txt LICENSE

      - name: Create tarball (Windows)
        if: matrix.goos == 'windows'
        working-directory: build
        run: |
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }} README.txt LICENSE

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./build/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Generate checksum
        working-directory: build
        run: |
          sha256sum ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./build/${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_content_type: text/plain

  create-checksums-file:
    name: Create Combined Checksums File
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest

    steps:
      - name: Download all checksums
        uses: actions/download-artifact@v3
        continue-on-error: true

      - name: Create combined checksums file
        run: |
          echo "# SHA256 Checksums for Ivaldi VCS ${{ needs.create-release.outputs.version }}" > checksums.txt
          echo "" >> checksums.txt
          echo "Verify downloads with: sha256sum -c checksums.txt" >> checksums.txt
          echo "" >> checksums.txt

      - name: Upload combined checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
